// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
namespace brpc {
namespace policy {
class HuluRpcRequestMeta;
class HuluRpcRequestMetaDefaultTypeInternal;
extern HuluRpcRequestMetaDefaultTypeInternal _HuluRpcRequestMeta_default_instance_;
class HuluRpcResponseMeta;
class HuluRpcResponseMetaDefaultTypeInternal;
extern HuluRpcResponseMetaDefaultTypeInternal _HuluRpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::policy::HuluRpcRequestMeta* Arena::CreateMaybeMessage<::brpc::policy::HuluRpcRequestMeta>(Arena*);
template<> ::brpc::policy::HuluRpcResponseMeta* Arena::CreateMaybeMessage<::brpc::policy::HuluRpcResponseMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {
namespace policy {

// ===================================================================

class HuluRpcRequestMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcRequestMeta) */ {
 public:
  inline HuluRpcRequestMeta() : HuluRpcRequestMeta(nullptr) {}
  virtual ~HuluRpcRequestMeta();

  HuluRpcRequestMeta(const HuluRpcRequestMeta& from);
  HuluRpcRequestMeta(HuluRpcRequestMeta&& from) noexcept
    : HuluRpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcRequestMeta& operator=(const HuluRpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline HuluRpcRequestMeta& operator=(HuluRpcRequestMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HuluRpcRequestMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HuluRpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcRequestMeta*>(
               &_HuluRpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HuluRpcRequestMeta& a, HuluRpcRequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(HuluRpcRequestMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HuluRpcRequestMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HuluRpcRequestMeta* New() const final {
    return CreateMaybeMessage<HuluRpcRequestMeta>(nullptr);
  }

  HuluRpcRequestMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HuluRpcRequestMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HuluRpcRequestMeta& from);
  void MergeFrom(const HuluRpcRequestMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HuluRpcRequestMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.HuluRpcRequestMeta";
  }
  protected:
  explicit HuluRpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto);
    return ::descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kUserDataFieldNumber = 11,
    kMethodNameFieldNumber = 14,
    kCredentialDataFieldNumber = 15,
    kChuckInfoFieldNumber = 6,
    kMethodIndexFieldNumber = 2,
    kCompressTypeFieldNumber = 3,
    kCorrelationIdFieldNumber = 4,
    kLogIdFieldNumber = 5,
    kTraceIdFieldNumber = 7,
    kParentSpanIdFieldNumber = 8,
    kSpanIdFieldNumber = 9,
    kRequestTalkTypeFieldNumber = 10,
    kUserMessageSizeFieldNumber = 12,
    kUserDefinedSourceAddrFieldNumber = 13,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // optional bytes user_data = 11;
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const std::string& user_data() const;
  void set_user_data(const std::string& value);
  void set_user_data(std::string&& value);
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  std::string* mutable_user_data();
  std::string* release_user_data();
  void set_allocated_user_data(std::string* user_data);
  private:
  const std::string& _internal_user_data() const;
  void _internal_set_user_data(const std::string& value);
  std::string* _internal_mutable_user_data();
  public:

  // optional string method_name = 14;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional bytes credential_data = 15;
  bool has_credential_data() const;
  private:
  bool _internal_has_credential_data() const;
  public:
  void clear_credential_data();
  const std::string& credential_data() const;
  void set_credential_data(const std::string& value);
  void set_credential_data(std::string&& value);
  void set_credential_data(const char* value);
  void set_credential_data(const void* value, size_t size);
  std::string* mutable_credential_data();
  std::string* release_credential_data();
  void set_allocated_credential_data(std::string* credential_data);
  private:
  const std::string& _internal_credential_data() const;
  void _internal_set_credential_data(const std::string& value);
  std::string* _internal_mutable_credential_data();
  public:

  // optional .brpc.ChunkInfo chuck_info = 6;
  bool has_chuck_info() const;
  private:
  bool _internal_has_chuck_info() const;
  public:
  void clear_chuck_info();
  const ::brpc::ChunkInfo& chuck_info() const;
  ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info);
  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chuck_info();
  public:
  void unsafe_arena_set_allocated_chuck_info(
      ::brpc::ChunkInfo* chuck_info);
  ::brpc::ChunkInfo* unsafe_arena_release_chuck_info();

  // required int32 method_index = 2;
  bool has_method_index() const;
  private:
  bool _internal_has_method_index() const;
  public:
  void clear_method_index();
  ::PROTOBUF_NAMESPACE_ID::int32 method_index() const;
  void set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_method_index() const;
  void _internal_set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compress_type = 3;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  ::PROTOBUF_NAMESPACE_ID::int32 compress_type() const;
  void set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compress_type() const;
  void _internal_set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 correlation_id = 4;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  ::PROTOBUF_NAMESPACE_ID::int64 correlation_id() const;
  void set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_correlation_id() const;
  void _internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 log_id = 5;
  bool has_log_id() const;
  private:
  bool _internal_has_log_id() const;
  public:
  void clear_log_id();
  ::PROTOBUF_NAMESPACE_ID::int64 log_id() const;
  void set_log_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_log_id() const;
  void _internal_set_log_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 trace_id = 7;
  bool has_trace_id() const;
  private:
  bool _internal_has_trace_id() const;
  public:
  void clear_trace_id();
  ::PROTOBUF_NAMESPACE_ID::int64 trace_id() const;
  void set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trace_id() const;
  void _internal_set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 parent_span_id = 8;
  bool has_parent_span_id() const;
  private:
  bool _internal_has_parent_span_id() const;
  public:
  void clear_parent_span_id();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_span_id() const;
  void set_parent_span_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parent_span_id() const;
  void _internal_set_parent_span_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 span_id = 9;
  bool has_span_id() const;
  private:
  bool _internal_has_span_id() const;
  public:
  void clear_span_id();
  ::PROTOBUF_NAMESPACE_ID::int64 span_id() const;
  void set_span_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_span_id() const;
  void _internal_set_span_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .brpc.TalkType request_talk_type = 10;
  bool has_request_talk_type() const;
  private:
  bool _internal_has_request_talk_type() const;
  public:
  void clear_request_talk_type();
  ::brpc::TalkType request_talk_type() const;
  void set_request_talk_type(::brpc::TalkType value);
  private:
  ::brpc::TalkType _internal_request_talk_type() const;
  void _internal_set_request_talk_type(::brpc::TalkType value);
  public:

  // optional int32 user_message_size = 12;
  bool has_user_message_size() const;
  private:
  bool _internal_has_user_message_size() const;
  public:
  void clear_user_message_size();
  ::PROTOBUF_NAMESPACE_ID::int32 user_message_size() const;
  void set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_message_size() const;
  void _internal_set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 user_defined_source_addr = 13;
  bool has_user_defined_source_addr() const;
  private:
  bool _internal_has_user_defined_source_addr() const;
  public:
  void clear_user_defined_source_addr();
  ::PROTOBUF_NAMESPACE_ID::int64 user_defined_source_addr() const;
  void set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_defined_source_addr() const;
  void _internal_set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcRequestMeta)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_data_;
  ::brpc::ChunkInfo* chuck_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 compress_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 correlation_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 log_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 trace_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_span_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 span_id_;
  int request_talk_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_message_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_defined_source_addr_;
  friend struct ::TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class HuluRpcResponseMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcResponseMeta) */ {
 public:
  inline HuluRpcResponseMeta() : HuluRpcResponseMeta(nullptr) {}
  virtual ~HuluRpcResponseMeta();

  HuluRpcResponseMeta(const HuluRpcResponseMeta& from);
  HuluRpcResponseMeta(HuluRpcResponseMeta&& from) noexcept
    : HuluRpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcResponseMeta& operator=(const HuluRpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline HuluRpcResponseMeta& operator=(HuluRpcResponseMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HuluRpcResponseMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HuluRpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcResponseMeta*>(
               &_HuluRpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HuluRpcResponseMeta& a, HuluRpcResponseMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(HuluRpcResponseMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HuluRpcResponseMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HuluRpcResponseMeta* New() const final {
    return CreateMaybeMessage<HuluRpcResponseMeta>(nullptr);
  }

  HuluRpcResponseMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HuluRpcResponseMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HuluRpcResponseMeta& from);
  void MergeFrom(const HuluRpcResponseMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HuluRpcResponseMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.HuluRpcResponseMeta";
  }
  protected:
  explicit HuluRpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto);
    return ::descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kUserDataFieldNumber = 7,
    kChuckInfoFieldNumber = 5,
    kErrorCodeFieldNumber = 1,
    kCompressTypeFieldNumber = 4,
    kCorrelationIdFieldNumber = 3,
    kResponseTalkTypeFieldNumber = 6,
    kUserMessageSizeFieldNumber = 8,
    kUserDefinedSourceAddrFieldNumber = 9,
  };
  // optional string error_text = 2;
  bool has_error_text() const;
  private:
  bool _internal_has_error_text() const;
  public:
  void clear_error_text();
  const std::string& error_text() const;
  void set_error_text(const std::string& value);
  void set_error_text(std::string&& value);
  void set_error_text(const char* value);
  void set_error_text(const char* value, size_t size);
  std::string* mutable_error_text();
  std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // optional bytes user_data = 7;
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const std::string& user_data() const;
  void set_user_data(const std::string& value);
  void set_user_data(std::string&& value);
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  std::string* mutable_user_data();
  std::string* release_user_data();
  void set_allocated_user_data(std::string* user_data);
  private:
  const std::string& _internal_user_data() const;
  void _internal_set_user_data(const std::string& value);
  std::string* _internal_mutable_user_data();
  public:

  // optional .brpc.ChunkInfo chuck_info = 5;
  bool has_chuck_info() const;
  private:
  bool _internal_has_chuck_info() const;
  public:
  void clear_chuck_info();
  const ::brpc::ChunkInfo& chuck_info() const;
  ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info);
  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chuck_info();
  public:
  void unsafe_arena_set_allocated_chuck_info(
      ::brpc::ChunkInfo* chuck_info);
  ::brpc::ChunkInfo* unsafe_arena_release_chuck_info();

  // optional int32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compress_type = 4;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  ::PROTOBUF_NAMESPACE_ID::int32 compress_type() const;
  void set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compress_type() const;
  void _internal_set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint64 correlation_id = 3;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  ::PROTOBUF_NAMESPACE_ID::int64 correlation_id() const;
  void set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_correlation_id() const;
  void _internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .brpc.TalkType response_talk_type = 6;
  bool has_response_talk_type() const;
  private:
  bool _internal_has_response_talk_type() const;
  public:
  void clear_response_talk_type();
  ::brpc::TalkType response_talk_type() const;
  void set_response_talk_type(::brpc::TalkType value);
  private:
  ::brpc::TalkType _internal_response_talk_type() const;
  void _internal_set_response_talk_type(::brpc::TalkType value);
  public:

  // optional int32 user_message_size = 8;
  bool has_user_message_size() const;
  private:
  bool _internal_has_user_message_size() const;
  public:
  void clear_user_message_size();
  ::PROTOBUF_NAMESPACE_ID::int32 user_message_size() const;
  void set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_message_size() const;
  void _internal_set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 user_defined_source_addr = 9;
  bool has_user_defined_source_addr() const;
  private:
  bool _internal_has_user_defined_source_addr() const;
  public:
  void clear_user_defined_source_addr();
  ::PROTOBUF_NAMESPACE_ID::int64 user_defined_source_addr() const;
  void set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_defined_source_addr() const;
  void _internal_set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcResponseMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_data_;
  ::brpc::ChunkInfo* chuck_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 compress_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 correlation_id_;
  int response_talk_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_message_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_defined_source_addr_;
  friend struct ::TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HuluRpcRequestMeta

// required string service_name = 1;
inline bool HuluRpcRequestMeta::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_service_name() const {
  return _internal_has_service_name();
}
inline void HuluRpcRequestMeta::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HuluRpcRequestMeta::service_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.service_name)
  return _internal_service_name();
}
inline void HuluRpcRequestMeta::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline std::string* HuluRpcRequestMeta::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& HuluRpcRequestMeta::_internal_service_name() const {
  return service_name_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcRequestMeta::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline void HuluRpcRequestMeta::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline void HuluRpcRequestMeta::set_service_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcRequestMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcRequestMeta::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.service_name)
}

// required int32 method_index = 2;
inline bool HuluRpcRequestMeta::_internal_has_method_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_method_index() const {
  return _internal_has_method_index();
}
inline void HuluRpcRequestMeta::clear_method_index() {
  method_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::_internal_method_index() const {
  return method_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::method_index() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_index)
  return _internal_method_index();
}
inline void HuluRpcRequestMeta::_internal_set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  method_index_ = value;
}
inline void HuluRpcRequestMeta::set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_method_index(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_index)
}

// optional int32 compress_type = 3;
inline bool HuluRpcRequestMeta::_internal_has_compress_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void HuluRpcRequestMeta::clear_compress_type() {
  compress_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::_internal_compress_type() const {
  return compress_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.compress_type)
  return _internal_compress_type();
}
inline void HuluRpcRequestMeta::_internal_set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  compress_type_ = value;
}
inline void HuluRpcRequestMeta::set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.compress_type)
}

// optional int64 correlation_id = 4;
inline bool HuluRpcRequestMeta::_internal_has_correlation_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline void HuluRpcRequestMeta::clear_correlation_id() {
  correlation_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_correlation_id() const {
  return correlation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.correlation_id)
  return _internal_correlation_id();
}
inline void HuluRpcRequestMeta::_internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  correlation_id_ = value;
}
inline void HuluRpcRequestMeta::set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.correlation_id)
}

// optional int64 log_id = 5;
inline bool HuluRpcRequestMeta::_internal_has_log_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_log_id() const {
  return _internal_has_log_id();
}
inline void HuluRpcRequestMeta::clear_log_id() {
  log_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_log_id() const {
  return log_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.log_id)
  return _internal_log_id();
}
inline void HuluRpcRequestMeta::_internal_set_log_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  log_id_ = value;
}
inline void HuluRpcRequestMeta::set_log_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.log_id)
}

// optional .brpc.ChunkInfo chuck_info = 6;
inline bool HuluRpcRequestMeta::_internal_has_chuck_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || chuck_info_ != nullptr);
  return value;
}
inline bool HuluRpcRequestMeta::has_chuck_info() const {
  return _internal_has_chuck_info();
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::_internal_chuck_info() const {
  const ::brpc::ChunkInfo* p = chuck_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::brpc::ChunkInfo*>(
      &::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::chuck_info() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return _internal_chuck_info();
}
inline void HuluRpcRequestMeta::unsafe_arena_set_allocated_chuck_info(
    ::brpc::ChunkInfo* chuck_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info_);
  }
  chuck_info_ = chuck_info;
  if (chuck_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.HuluRpcRequestMeta.chuck_info)
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::release_chuck_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::unsafe_arena_release_chuck_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.chuck_info)
  _has_bits_[0] &= ~0x00000010u;
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::_internal_mutable_chuck_info() {
  _has_bits_[0] |= 0x00000010u;
  if (chuck_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArena());
    chuck_info_ = p;
  }
  return chuck_info_;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::mutable_chuck_info() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return _internal_mutable_chuck_info();
}
inline void HuluRpcRequestMeta::set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info_);
  }
  if (chuck_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info)->GetArena();
    if (message_arena != submessage_arena) {
      chuck_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chuck_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  chuck_info_ = chuck_info;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.chuck_info)
}

// optional int64 trace_id = 7;
inline bool HuluRpcRequestMeta::_internal_has_trace_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_trace_id() const {
  return _internal_has_trace_id();
}
inline void HuluRpcRequestMeta::clear_trace_id() {
  trace_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_trace_id() const {
  return trace_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.trace_id)
  return _internal_trace_id();
}
inline void HuluRpcRequestMeta::_internal_set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  trace_id_ = value;
}
inline void HuluRpcRequestMeta::set_trace_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.trace_id)
}

// optional int64 parent_span_id = 8;
inline bool HuluRpcRequestMeta::_internal_has_parent_span_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_parent_span_id() const {
  return _internal_has_parent_span_id();
}
inline void HuluRpcRequestMeta::clear_parent_span_id() {
  parent_span_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_parent_span_id() const {
  return parent_span_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void HuluRpcRequestMeta::_internal_set_parent_span_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  parent_span_id_ = value;
}
inline void HuluRpcRequestMeta::set_parent_span_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.parent_span_id)
}

// optional int64 span_id = 9;
inline bool HuluRpcRequestMeta::_internal_has_span_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_span_id() const {
  return _internal_has_span_id();
}
inline void HuluRpcRequestMeta::clear_span_id() {
  span_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_span_id() const {
  return span_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.span_id)
  return _internal_span_id();
}
inline void HuluRpcRequestMeta::_internal_set_span_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  span_id_ = value;
}
inline void HuluRpcRequestMeta::set_span_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.span_id)
}

// optional .brpc.TalkType request_talk_type = 10;
inline bool HuluRpcRequestMeta::_internal_has_request_talk_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_request_talk_type() const {
  return _internal_has_request_talk_type();
}
inline void HuluRpcRequestMeta::clear_request_talk_type() {
  request_talk_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::brpc::TalkType HuluRpcRequestMeta::_internal_request_talk_type() const {
  return static_cast< ::brpc::TalkType >(request_talk_type_);
}
inline ::brpc::TalkType HuluRpcRequestMeta::request_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.request_talk_type)
  return _internal_request_talk_type();
}
inline void HuluRpcRequestMeta::_internal_set_request_talk_type(::brpc::TalkType value) {
  assert(::brpc::TalkType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  request_talk_type_ = value;
}
inline void HuluRpcRequestMeta::set_request_talk_type(::brpc::TalkType value) {
  _internal_set_request_talk_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.request_talk_type)
}

// optional bytes user_data = 11;
inline bool HuluRpcRequestMeta::_internal_has_user_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_user_data() const {
  return _internal_has_user_data();
}
inline void HuluRpcRequestMeta::clear_user_data() {
  user_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HuluRpcRequestMeta::user_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_data)
  return _internal_user_data();
}
inline void HuluRpcRequestMeta::set_user_data(const std::string& value) {
  _internal_set_user_data(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline std::string* HuluRpcRequestMeta::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.user_data)
  return _internal_mutable_user_data();
}
inline const std::string& HuluRpcRequestMeta::_internal_user_data() const {
  return user_data_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_user_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcRequestMeta::set_user_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline void HuluRpcRequestMeta::set_user_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline void HuluRpcRequestMeta::set_user_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_user_data() {
  _has_bits_[0] |= 0x00000002u;
  return user_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcRequestMeta::release_user_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.user_data)
  if (!_internal_has_user_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcRequestMeta::set_allocated_user_data(std::string* user_data) {
  if (user_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.user_data)
}

// optional int32 user_message_size = 12;
inline bool HuluRpcRequestMeta::_internal_has_user_message_size() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_user_message_size() const {
  return _internal_has_user_message_size();
}
inline void HuluRpcRequestMeta::clear_user_message_size() {
  user_message_size_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::_internal_user_message_size() const {
  return user_message_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcRequestMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_message_size)
  return _internal_user_message_size();
}
inline void HuluRpcRequestMeta::_internal_set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  user_message_size_ = value;
}
inline void HuluRpcRequestMeta::set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_message_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_message_size)
}

// optional int64 user_defined_source_addr = 13;
inline bool HuluRpcRequestMeta::_internal_has_user_defined_source_addr() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_user_defined_source_addr() const {
  return _internal_has_user_defined_source_addr();
}
inline void HuluRpcRequestMeta::clear_user_defined_source_addr() {
  user_defined_source_addr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::_internal_user_defined_source_addr() const {
  return user_defined_source_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcRequestMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
  return _internal_user_defined_source_addr();
}
inline void HuluRpcRequestMeta::_internal_set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  user_defined_source_addr_ = value;
}
inline void HuluRpcRequestMeta::set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_defined_source_addr(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
}

// optional string method_name = 14;
inline bool HuluRpcRequestMeta::_internal_has_method_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_method_name() const {
  return _internal_has_method_name();
}
inline void HuluRpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HuluRpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_name)
  return _internal_method_name();
}
inline void HuluRpcRequestMeta::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline std::string* HuluRpcRequestMeta::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& HuluRpcRequestMeta::_internal_method_name() const {
  return method_name_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcRequestMeta::set_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline void HuluRpcRequestMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline void HuluRpcRequestMeta::set_method_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_method_name() {
  _has_bits_[0] |= 0x00000004u;
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return method_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcRequestMeta::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.method_name)
}

// optional bytes credential_data = 15;
inline bool HuluRpcRequestMeta::_internal_has_credential_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HuluRpcRequestMeta::has_credential_data() const {
  return _internal_has_credential_data();
}
inline void HuluRpcRequestMeta::clear_credential_data() {
  credential_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& HuluRpcRequestMeta::credential_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.credential_data)
  return _internal_credential_data();
}
inline void HuluRpcRequestMeta::set_credential_data(const std::string& value) {
  _internal_set_credential_data(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline std::string* HuluRpcRequestMeta::mutable_credential_data() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.credential_data)
  return _internal_mutable_credential_data();
}
inline const std::string& HuluRpcRequestMeta::_internal_credential_data() const {
  return credential_data_.Get();
}
inline void HuluRpcRequestMeta::_internal_set_credential_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  credential_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcRequestMeta::set_credential_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  credential_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline void HuluRpcRequestMeta::set_credential_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  credential_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline void HuluRpcRequestMeta::set_credential_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  credential_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline std::string* HuluRpcRequestMeta::_internal_mutable_credential_data() {
  _has_bits_[0] |= 0x00000008u;
  return credential_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcRequestMeta::release_credential_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.credential_data)
  if (!_internal_has_credential_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return credential_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcRequestMeta::set_allocated_credential_data(std::string* credential_data) {
  if (credential_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  credential_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.credential_data)
}

// -------------------------------------------------------------------

// HuluRpcResponseMeta

// optional int32 error_code = 1;
inline bool HuluRpcResponseMeta::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_error_code() const {
  return _internal_has_error_code();
}
inline void HuluRpcResponseMeta::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_code)
  return _internal_error_code();
}
inline void HuluRpcResponseMeta::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  error_code_ = value;
}
inline void HuluRpcResponseMeta::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_code)
}

// optional string error_text = 2;
inline bool HuluRpcResponseMeta::_internal_has_error_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_error_text() const {
  return _internal_has_error_text();
}
inline void HuluRpcResponseMeta::clear_error_text() {
  error_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HuluRpcResponseMeta::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_text)
  return _internal_error_text();
}
inline void HuluRpcResponseMeta::set_error_text(const std::string& value) {
  _internal_set_error_text(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline std::string* HuluRpcResponseMeta::mutable_error_text() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.error_text)
  return _internal_mutable_error_text();
}
inline const std::string& HuluRpcResponseMeta::_internal_error_text() const {
  return error_text_.Get();
}
inline void HuluRpcResponseMeta::_internal_set_error_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcResponseMeta::set_error_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline void HuluRpcResponseMeta::set_error_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline void HuluRpcResponseMeta::set_error_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline std::string* HuluRpcResponseMeta::_internal_mutable_error_text() {
  _has_bits_[0] |= 0x00000001u;
  return error_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcResponseMeta::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.error_text)
  if (!_internal_has_error_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcResponseMeta::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.error_text)
}

// optional sint64 correlation_id = 3;
inline bool HuluRpcResponseMeta::_internal_has_correlation_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline void HuluRpcResponseMeta::clear_correlation_id() {
  correlation_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcResponseMeta::_internal_correlation_id() const {
  return correlation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcResponseMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.correlation_id)
  return _internal_correlation_id();
}
inline void HuluRpcResponseMeta::_internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  correlation_id_ = value;
}
inline void HuluRpcResponseMeta::set_correlation_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.correlation_id)
}

// optional int32 compress_type = 4;
inline bool HuluRpcResponseMeta::_internal_has_compress_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void HuluRpcResponseMeta::clear_compress_type() {
  compress_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::_internal_compress_type() const {
  return compress_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.compress_type)
  return _internal_compress_type();
}
inline void HuluRpcResponseMeta::_internal_set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  compress_type_ = value;
}
inline void HuluRpcResponseMeta::set_compress_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.compress_type)
}

// optional .brpc.ChunkInfo chuck_info = 5;
inline bool HuluRpcResponseMeta::_internal_has_chuck_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || chuck_info_ != nullptr);
  return value;
}
inline bool HuluRpcResponseMeta::has_chuck_info() const {
  return _internal_has_chuck_info();
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::_internal_chuck_info() const {
  const ::brpc::ChunkInfo* p = chuck_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::brpc::ChunkInfo*>(
      &::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::chuck_info() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return _internal_chuck_info();
}
inline void HuluRpcResponseMeta::unsafe_arena_set_allocated_chuck_info(
    ::brpc::ChunkInfo* chuck_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info_);
  }
  chuck_info_ = chuck_info;
  if (chuck_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.HuluRpcResponseMeta.chuck_info)
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::release_chuck_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::unsafe_arena_release_chuck_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.chuck_info)
  _has_bits_[0] &= ~0x00000004u;
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::_internal_mutable_chuck_info() {
  _has_bits_[0] |= 0x00000004u;
  if (chuck_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArena());
    chuck_info_ = p;
  }
  return chuck_info_;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::mutable_chuck_info() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return _internal_mutable_chuck_info();
}
inline void HuluRpcResponseMeta::set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info_);
  }
  if (chuck_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chuck_info)->GetArena();
    if (message_arena != submessage_arena) {
      chuck_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chuck_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chuck_info_ = chuck_info;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.chuck_info)
}

// optional .brpc.TalkType response_talk_type = 6;
inline bool HuluRpcResponseMeta::_internal_has_response_talk_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_response_talk_type() const {
  return _internal_has_response_talk_type();
}
inline void HuluRpcResponseMeta::clear_response_talk_type() {
  response_talk_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::brpc::TalkType HuluRpcResponseMeta::_internal_response_talk_type() const {
  return static_cast< ::brpc::TalkType >(response_talk_type_);
}
inline ::brpc::TalkType HuluRpcResponseMeta::response_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.response_talk_type)
  return _internal_response_talk_type();
}
inline void HuluRpcResponseMeta::_internal_set_response_talk_type(::brpc::TalkType value) {
  assert(::brpc::TalkType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  response_talk_type_ = value;
}
inline void HuluRpcResponseMeta::set_response_talk_type(::brpc::TalkType value) {
  _internal_set_response_talk_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.response_talk_type)
}

// optional bytes user_data = 7;
inline bool HuluRpcResponseMeta::_internal_has_user_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_user_data() const {
  return _internal_has_user_data();
}
inline void HuluRpcResponseMeta::clear_user_data() {
  user_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HuluRpcResponseMeta::user_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_data)
  return _internal_user_data();
}
inline void HuluRpcResponseMeta::set_user_data(const std::string& value) {
  _internal_set_user_data(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline std::string* HuluRpcResponseMeta::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.user_data)
  return _internal_mutable_user_data();
}
inline const std::string& HuluRpcResponseMeta::_internal_user_data() const {
  return user_data_.Get();
}
inline void HuluRpcResponseMeta::_internal_set_user_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HuluRpcResponseMeta::set_user_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline void HuluRpcResponseMeta::set_user_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline void HuluRpcResponseMeta::set_user_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline std::string* HuluRpcResponseMeta::_internal_mutable_user_data() {
  _has_bits_[0] |= 0x00000002u;
  return user_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HuluRpcResponseMeta::release_user_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.user_data)
  if (!_internal_has_user_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HuluRpcResponseMeta::set_allocated_user_data(std::string* user_data) {
  if (user_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.user_data)
}

// optional int32 user_message_size = 8;
inline bool HuluRpcResponseMeta::_internal_has_user_message_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_user_message_size() const {
  return _internal_has_user_message_size();
}
inline void HuluRpcResponseMeta::clear_user_message_size() {
  user_message_size_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::_internal_user_message_size() const {
  return user_message_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HuluRpcResponseMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_message_size)
  return _internal_user_message_size();
}
inline void HuluRpcResponseMeta::_internal_set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  user_message_size_ = value;
}
inline void HuluRpcResponseMeta::set_user_message_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_message_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_message_size)
}

// optional int64 user_defined_source_addr = 9;
inline bool HuluRpcResponseMeta::_internal_has_user_defined_source_addr() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HuluRpcResponseMeta::has_user_defined_source_addr() const {
  return _internal_has_user_defined_source_addr();
}
inline void HuluRpcResponseMeta::clear_user_defined_source_addr() {
  user_defined_source_addr_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcResponseMeta::_internal_user_defined_source_addr() const {
  return user_defined_source_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HuluRpcResponseMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
  return _internal_user_defined_source_addr();
}
inline void HuluRpcResponseMeta::_internal_set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  user_defined_source_addr_ = value;
}
inline void HuluRpcResponseMeta::set_user_defined_source_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_defined_source_addr(value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
