// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/rdma_traffic_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2frdma_5ftraffic_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2frdma_5ftraffic_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2frdma_5ftraffic_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2frdma_5ftraffic_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2frdma_5ftraffic_5fcontrol_2eproto;
namespace brpc {
namespace rdma {
class RdmaTrafficControlRequest;
class RdmaTrafficControlRequestDefaultTypeInternal;
extern RdmaTrafficControlRequestDefaultTypeInternal _RdmaTrafficControlRequest_default_instance_;
class RdmaTrafficControlResponse;
class RdmaTrafficControlResponseDefaultTypeInternal;
extern RdmaTrafficControlResponseDefaultTypeInternal _RdmaTrafficControlResponse_default_instance_;
}  // namespace rdma
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::rdma::RdmaTrafficControlRequest* Arena::CreateMaybeMessage<::brpc::rdma::RdmaTrafficControlRequest>(Arena*);
template<> ::brpc::rdma::RdmaTrafficControlResponse* Arena::CreateMaybeMessage<::brpc::rdma::RdmaTrafficControlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {
namespace rdma {

// ===================================================================

class RdmaTrafficControlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.rdma.RdmaTrafficControlRequest) */ {
 public:
  inline RdmaTrafficControlRequest() : RdmaTrafficControlRequest(nullptr) {}
  virtual ~RdmaTrafficControlRequest();

  RdmaTrafficControlRequest(const RdmaTrafficControlRequest& from);
  RdmaTrafficControlRequest(RdmaTrafficControlRequest&& from) noexcept
    : RdmaTrafficControlRequest() {
    *this = ::std::move(from);
  }

  inline RdmaTrafficControlRequest& operator=(const RdmaTrafficControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RdmaTrafficControlRequest& operator=(RdmaTrafficControlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RdmaTrafficControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RdmaTrafficControlRequest* internal_default_instance() {
    return reinterpret_cast<const RdmaTrafficControlRequest*>(
               &_RdmaTrafficControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RdmaTrafficControlRequest& a, RdmaTrafficControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RdmaTrafficControlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RdmaTrafficControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RdmaTrafficControlRequest* New() const final {
    return CreateMaybeMessage<RdmaTrafficControlRequest>(nullptr);
  }

  RdmaTrafficControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RdmaTrafficControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RdmaTrafficControlRequest& from);
  void MergeFrom(const RdmaTrafficControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RdmaTrafficControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.rdma.RdmaTrafficControlRequest";
  }
  protected:
  explicit RdmaTrafficControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_brpc_2frdma_5ftraffic_5fcontrol_2eproto);
    return ::descriptor_table_brpc_2frdma_5ftraffic_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketIdFieldNumber = 1,
  };
  // repeated uint64 socket_id = 1;
  int socket_id_size() const;
  private:
  int _internal_socket_id_size() const;
  public:
  void clear_socket_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_socket_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_socket_id() const;
  void _internal_add_socket_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_socket_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 socket_id(int index) const;
  void set_socket_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_socket_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      socket_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_socket_id();

  // @@protoc_insertion_point(class_scope:brpc.rdma.RdmaTrafficControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > socket_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_brpc_2frdma_5ftraffic_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class RdmaTrafficControlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.rdma.RdmaTrafficControlResponse) */ {
 public:
  inline RdmaTrafficControlResponse() : RdmaTrafficControlResponse(nullptr) {}
  virtual ~RdmaTrafficControlResponse();

  RdmaTrafficControlResponse(const RdmaTrafficControlResponse& from);
  RdmaTrafficControlResponse(RdmaTrafficControlResponse&& from) noexcept
    : RdmaTrafficControlResponse() {
    *this = ::std::move(from);
  }

  inline RdmaTrafficControlResponse& operator=(const RdmaTrafficControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RdmaTrafficControlResponse& operator=(RdmaTrafficControlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RdmaTrafficControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RdmaTrafficControlResponse* internal_default_instance() {
    return reinterpret_cast<const RdmaTrafficControlResponse*>(
               &_RdmaTrafficControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RdmaTrafficControlResponse& a, RdmaTrafficControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RdmaTrafficControlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RdmaTrafficControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RdmaTrafficControlResponse* New() const final {
    return CreateMaybeMessage<RdmaTrafficControlResponse>(nullptr);
  }

  RdmaTrafficControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RdmaTrafficControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RdmaTrafficControlResponse& from);
  void MergeFrom(const RdmaTrafficControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RdmaTrafficControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.rdma.RdmaTrafficControlResponse";
  }
  protected:
  explicit RdmaTrafficControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_brpc_2frdma_5ftraffic_5fcontrol_2eproto);
    return ::descriptor_table_brpc_2frdma_5ftraffic_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:brpc.rdma.RdmaTrafficControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_brpc_2frdma_5ftraffic_5fcontrol_2eproto;
};
// ===================================================================

class RdmaTrafficControlService_Stub;

class RdmaTrafficControlService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RdmaTrafficControlService() {};
 public:
  virtual ~RdmaTrafficControlService();

  typedef RdmaTrafficControlService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void TurnOn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void TurnOff(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void TurnOffPartially(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RdmaTrafficControlService);
};

class RdmaTrafficControlService_Stub : public RdmaTrafficControlService {
 public:
  RdmaTrafficControlService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RdmaTrafficControlService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RdmaTrafficControlService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RdmaTrafficControlService ------------------------------------------

  void TurnOn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);
  void TurnOff(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);
  void TurnOffPartially(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::rdma::RdmaTrafficControlRequest* request,
                       ::brpc::rdma::RdmaTrafficControlResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RdmaTrafficControlService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RdmaTrafficControlRequest

// repeated uint64 socket_id = 1;
inline int RdmaTrafficControlRequest::_internal_socket_id_size() const {
  return socket_id_.size();
}
inline int RdmaTrafficControlRequest::socket_id_size() const {
  return _internal_socket_id_size();
}
inline void RdmaTrafficControlRequest::clear_socket_id() {
  socket_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaTrafficControlRequest::_internal_socket_id(int index) const {
  return socket_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaTrafficControlRequest::socket_id(int index) const {
  // @@protoc_insertion_point(field_get:brpc.rdma.RdmaTrafficControlRequest.socket_id)
  return _internal_socket_id(index);
}
inline void RdmaTrafficControlRequest::set_socket_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  socket_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:brpc.rdma.RdmaTrafficControlRequest.socket_id)
}
inline void RdmaTrafficControlRequest::_internal_add_socket_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  socket_id_.Add(value);
}
inline void RdmaTrafficControlRequest::add_socket_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_socket_id(value);
  // @@protoc_insertion_point(field_add:brpc.rdma.RdmaTrafficControlRequest.socket_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RdmaTrafficControlRequest::_internal_socket_id() const {
  return socket_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RdmaTrafficControlRequest::socket_id() const {
  // @@protoc_insertion_point(field_list:brpc.rdma.RdmaTrafficControlRequest.socket_id)
  return _internal_socket_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RdmaTrafficControlRequest::_internal_mutable_socket_id() {
  return &socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RdmaTrafficControlRequest::mutable_socket_id() {
  // @@protoc_insertion_point(field_mutable_list:brpc.rdma.RdmaTrafficControlRequest.socket_id)
  return _internal_mutable_socket_id();
}

// -------------------------------------------------------------------

// RdmaTrafficControlResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rdma
}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2frdma_5ftraffic_5fcontrol_2eproto
