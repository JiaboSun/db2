// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_lock_service.proto

#include "global_lock_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace dbx1000 {
class LockRemoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRemoteRequest> _instance;
} _LockRemoteRequest_default_instance_;
class LockRemoteReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRemoteReply> _instance;
} _LockRemoteReply_default_instance_;
class InstanceInitDoneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstanceInitDoneRequest> _instance;
} _InstanceInitDoneRequest_default_instance_;
class InstanceInitDoneReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstanceInitDoneReply> _instance;
} _InstanceInitDoneReply_default_instance_;
class GlobalLockInitDoneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalLockInitDoneRequest> _instance;
} _GlobalLockInitDoneRequest_default_instance_;
class GlobalLockInitDoneReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalLockInitDoneReply> _instance;
} _GlobalLockInitDoneReply_default_instance_;
class InvalidRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvalidRequest> _instance;
} _InvalidRequest_default_instance_;
class InvalidReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvalidReply> _instance;
} _InvalidReply_default_instance_;
class GetNextTsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNextTsRequest> _instance;
} _GetNextTsRequest_default_instance_;
class GetNextTsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNextTsReply> _instance;
} _GetNextTsReply_default_instance_;
class TestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequest> _instance;
} _TestRequest_default_instance_;
class TestReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReply> _instance;
} _TestReply_default_instance_;
}  // namespace dbx1000
static void InitDefaultsscc_info_GetNextTsReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetNextTsReply_default_instance_;
    new (ptr) ::dbx1000::GetNextTsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetNextTsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNextTsReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNextTsReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetNextTsRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetNextTsRequest_default_instance_;
    new (ptr) ::dbx1000::GetNextTsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetNextTsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNextTsRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNextTsRequest_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GlobalLockInitDoneReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GlobalLockInitDoneReply_default_instance_;
    new (ptr) ::dbx1000::GlobalLockInitDoneReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GlobalLockInitDoneReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalLockInitDoneReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GlobalLockInitDoneReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GlobalLockInitDoneRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GlobalLockInitDoneRequest_default_instance_;
    new (ptr) ::dbx1000::GlobalLockInitDoneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GlobalLockInitDoneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalLockInitDoneRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GlobalLockInitDoneRequest_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InstanceInitDoneReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InstanceInitDoneReply_default_instance_;
    new (ptr) ::dbx1000::InstanceInitDoneReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InstanceInitDoneReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstanceInitDoneReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstanceInitDoneReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InstanceInitDoneRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InstanceInitDoneRequest_default_instance_;
    new (ptr) ::dbx1000::InstanceInitDoneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InstanceInitDoneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstanceInitDoneRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstanceInitDoneRequest_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InvalidReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InvalidReply_default_instance_;
    new (ptr) ::dbx1000::InvalidReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InvalidReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvalidReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvalidReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InvalidRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InvalidRequest_default_instance_;
    new (ptr) ::dbx1000::InvalidRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InvalidRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvalidRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvalidRequest_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LockRemoteReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockRemoteReply_default_instance_;
    new (ptr) ::dbx1000::LockRemoteReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockRemoteReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockRemoteReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockRemoteReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LockRemoteRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockRemoteRequest_default_instance_;
    new (ptr) ::dbx1000::LockRemoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockRemoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockRemoteRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockRemoteRequest_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TestReply_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TestReply_default_instance_;
    new (ptr) ::dbx1000::TestReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TestReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestReply_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestReply_global_5flock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TestRequest_global_5flock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TestRequest_default_instance_;
    new (ptr) ::dbx1000::TestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequest_global_5flock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRequest_global_5flock_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_global_5flock_5fservice_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_global_5flock_5fservice_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_global_5flock_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_global_5flock_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, instance_id_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, page_id_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, req_mode_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, page_buf_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteRequest, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteReply, rc_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteReply, page_buf_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::LockRemoteReply, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InstanceInitDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InstanceInitDoneRequest, instance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InstanceInitDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GlobalLockInitDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GlobalLockInitDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GlobalLockInitDoneReply, init_done_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidRequest, page_id_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidRequest, page_buf_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidRequest, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidReply, rc_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidReply, page_buf_),
  PROTOBUF_FIELD_OFFSET(::dbx1000::InvalidReply, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GetNextTsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GetNextTsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::GetNextTsReply, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::TestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dbx1000::TestReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dbx1000::TestReply, rc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dbx1000::LockRemoteRequest)},
  { 10, -1, sizeof(::dbx1000::LockRemoteReply)},
  { 18, -1, sizeof(::dbx1000::InstanceInitDoneRequest)},
  { 24, -1, sizeof(::dbx1000::InstanceInitDoneReply)},
  { 29, -1, sizeof(::dbx1000::GlobalLockInitDoneRequest)},
  { 34, -1, sizeof(::dbx1000::GlobalLockInitDoneReply)},
  { 40, -1, sizeof(::dbx1000::InvalidRequest)},
  { 48, -1, sizeof(::dbx1000::InvalidReply)},
  { 56, -1, sizeof(::dbx1000::GetNextTsRequest)},
  { 61, -1, sizeof(::dbx1000::GetNextTsReply)},
  { 67, -1, sizeof(::dbx1000::TestRequest)},
  { 72, -1, sizeof(::dbx1000::TestReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_LockRemoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_LockRemoteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_InstanceInitDoneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_InstanceInitDoneReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_GlobalLockInitDoneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_GlobalLockInitDoneReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_InvalidRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_InvalidReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_GetNextTsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_GetNextTsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_TestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dbx1000::_TestReply_default_instance_),
};

const char descriptor_table_protodef_global_5flock_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031global_lock_service.proto\022\007dbx1000\"\202\001\n"
  "\021LockRemoteRequest\022\023\n\013instance_id\030\001 \001(\005\022"
  "\017\n\007page_id\030\002 \001(\004\022&\n\010req_mode\030\003 \001(\0162\024.dbx"
  "1000.RpcLockMode\022\020\n\010page_buf\030\004 \001(\014\022\r\n\005co"
  "unt\030\005 \001(\004\"N\n\017LockRemoteReply\022\032\n\002rc\030\001 \001(\016"
  "2\016.dbx1000.RpcRC\022\020\n\010page_buf\030\002 \001(\014\022\r\n\005co"
  "unt\030\003 \001(\004\".\n\027InstanceInitDoneRequest\022\023\n\013"
  "instance_id\030\001 \001(\005\"\027\n\025InstanceInitDoneRep"
  "ly\"\033\n\031GlobalLockInitDoneRequest\",\n\027Globa"
  "lLockInitDoneReply\022\021\n\tinit_done\030\001 \001(\010\"B\n"
  "\016InvalidRequest\022\017\n\007page_id\030\001 \001(\004\022\020\n\010page"
  "_buf\030\002 \001(\014\022\r\n\005count\030\003 \001(\004\"K\n\014InvalidRepl"
  "y\022\032\n\002rc\030\001 \001(\0162\016.dbx1000.RpcRC\022\020\n\010page_bu"
  "f\030\002 \001(\014\022\r\n\005count\030\003 \001(\004\"\022\n\020GetNextTsReque"
  "st\"\034\n\016GetNextTsReply\022\n\n\002ts\030\001 \001(\004\"\r\n\013Test"
  "Request\"\027\n\tTestReply\022\n\n\002rc\030\001 \001(\005*)\n\013RpcL"
  "ockMode\022\005\n\001O\020\000\022\005\n\001P\020\001\022\005\n\001S\020\002\022\005\n\001X\020\003*W\n\005R"
  "pcRC\022\010\n\004RCOK\020\000\022\n\n\006Commit\020\001\022\t\n\005Abort\020\002\022\010\n"
  "\004WAIT\020\003\022\t\n\005ERROR\020\004\022\n\n\006FINISH\020\005\022\014\n\010TIME_O"
  "UT\020\0062\303\003\n\021GlobalLockService\022D\n\nLockRemote"
  "\022\032.dbx1000.LockRemoteRequest\032\030.dbx1000.L"
  "ockRemoteReply\"\000\022V\n\020InstanceInitDone\022 .d"
  "bx1000.InstanceInitDoneRequest\032\036.dbx1000"
  ".InstanceInitDoneReply\"\000\022\\\n\022GlobalLockIn"
  "itDone\022\".dbx1000.GlobalLockInitDoneReque"
  "st\032 .dbx1000.GlobalLockInitDoneReply\"\000\022A"
  "\n\tGetNextTs\022\031.dbx1000.GetNextTsRequest\032\027"
  ".dbx1000.GetNextTsReply\"\000\022;\n\007Invalid\022\027.d"
  "bx1000.InvalidRequest\032\025.dbx1000.InvalidR"
  "eply\"\000\0222\n\004Test\022\024.dbx1000.TestRequest\032\022.d"
  "bx1000.TestReply\"\000B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_global_5flock_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_global_5flock_5fservice_2eproto_sccs[12] = {
  &scc_info_GetNextTsReply_global_5flock_5fservice_2eproto.base,
  &scc_info_GetNextTsRequest_global_5flock_5fservice_2eproto.base,
  &scc_info_GlobalLockInitDoneReply_global_5flock_5fservice_2eproto.base,
  &scc_info_GlobalLockInitDoneRequest_global_5flock_5fservice_2eproto.base,
  &scc_info_InstanceInitDoneReply_global_5flock_5fservice_2eproto.base,
  &scc_info_InstanceInitDoneRequest_global_5flock_5fservice_2eproto.base,
  &scc_info_InvalidReply_global_5flock_5fservice_2eproto.base,
  &scc_info_InvalidRequest_global_5flock_5fservice_2eproto.base,
  &scc_info_LockRemoteReply_global_5flock_5fservice_2eproto.base,
  &scc_info_LockRemoteRequest_global_5flock_5fservice_2eproto.base,
  &scc_info_TestReply_global_5flock_5fservice_2eproto.base,
  &scc_info_TestRequest_global_5flock_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_global_5flock_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_global_5flock_5fservice_2eproto = {
  false, false, descriptor_table_protodef_global_5flock_5fservice_2eproto, "global_lock_service.proto", 1231,
  &descriptor_table_global_5flock_5fservice_2eproto_once, descriptor_table_global_5flock_5fservice_2eproto_sccs, descriptor_table_global_5flock_5fservice_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_global_5flock_5fservice_2eproto::offsets,
  file_level_metadata_global_5flock_5fservice_2eproto, 12, file_level_enum_descriptors_global_5flock_5fservice_2eproto, file_level_service_descriptors_global_5flock_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_global_5flock_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_global_5flock_5fservice_2eproto)), true);
namespace dbx1000 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcLockMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_global_5flock_5fservice_2eproto);
  return file_level_enum_descriptors_global_5flock_5fservice_2eproto[0];
}
bool RpcLockMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcRC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_global_5flock_5fservice_2eproto);
  return file_level_enum_descriptors_global_5flock_5fservice_2eproto[1];
}
bool RpcRC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LockRemoteRequest::InitAsDefaultInstance() {
}
class LockRemoteRequest::_Internal {
 public:
};

LockRemoteRequest::LockRemoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.LockRemoteRequest)
}
LockRemoteRequest::LockRemoteRequest(const LockRemoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_buf().empty()) {
    page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_buf(),
      GetArena());
  }
  ::memcpy(&page_id_, &from.page_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockRemoteRequest)
}

void LockRemoteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockRemoteRequest_global_5flock_5fservice_2eproto.base);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
}

LockRemoteRequest::~LockRemoteRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.LockRemoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockRemoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockRemoteRequest::ArenaDtor(void* object) {
  LockRemoteRequest* _this = reinterpret_cast< LockRemoteRequest* >(object);
  (void)_this;
}
void LockRemoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockRemoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRemoteRequest& LockRemoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRemoteRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LockRemoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockRemoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockRemoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 page_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dbx1000.RpcLockMode req_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_mode(static_cast<::dbx1000::RpcLockMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes page_buf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_page_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRemoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockRemoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_page_id(), target);
  }

  // .dbx1000.RpcLockMode req_mode = 3;
  if (this->req_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_req_mode(), target);
  }

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_page_buf(), target);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockRemoteRequest)
  return target;
}

size_t LockRemoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockRemoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_buf());
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_page_id());
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instance_id());
  }

  // .dbx1000.RpcLockMode req_mode = 3;
  if (this->req_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_mode());
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRemoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockRemoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRemoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRemoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockRemoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockRemoteRequest)
    MergeFrom(*source);
  }
}

void LockRemoteRequest::MergeFrom(const LockRemoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockRemoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {
    _internal_set_page_buf(from._internal_page_buf());
  }
  if (from.page_id() != 0) {
    _internal_set_page_id(from._internal_page_id());
  }
  if (from.instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
  if (from.req_mode() != 0) {
    _internal_set_req_mode(from._internal_req_mode());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void LockRemoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockRemoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRemoteRequest::CopyFrom(const LockRemoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockRemoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRemoteRequest::IsInitialized() const {
  return true;
}

void LockRemoteRequest::InternalSwap(LockRemoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_buf_.Swap(&other->page_buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockRemoteRequest, count_)
      + sizeof(LockRemoteRequest::count_)
      - PROTOBUF_FIELD_OFFSET(LockRemoteRequest, page_id_)>(
          reinterpret_cast<char*>(&page_id_),
          reinterpret_cast<char*>(&other->page_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRemoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockRemoteReply::InitAsDefaultInstance() {
}
class LockRemoteReply::_Internal {
 public:
};

LockRemoteReply::LockRemoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.LockRemoteReply)
}
LockRemoteReply::LockRemoteReply(const LockRemoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_buf().empty()) {
    page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_buf(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockRemoteReply)
}

void LockRemoteReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockRemoteReply_global_5flock_5fservice_2eproto.base);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
}

LockRemoteReply::~LockRemoteReply() {
  // @@protoc_insertion_point(destructor:dbx1000.LockRemoteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockRemoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockRemoteReply::ArenaDtor(void* object) {
  LockRemoteReply* _this = reinterpret_cast< LockRemoteReply* >(object);
  (void)_this;
}
void LockRemoteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockRemoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRemoteReply& LockRemoteReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRemoteReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LockRemoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockRemoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockRemoteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dbx1000.RpcRC rc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::dbx1000::RpcRC>(val));
        } else goto handle_unusual;
        continue;
      // bytes page_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRemoteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockRemoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dbx1000.RpcRC rc = 1;
  if (this->rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_page_buf(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockRemoteReply)
  return target;
}

size_t LockRemoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockRemoteReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_buf());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // .dbx1000.RpcRC rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRemoteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockRemoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRemoteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRemoteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockRemoteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockRemoteReply)
    MergeFrom(*source);
  }
}

void LockRemoteReply::MergeFrom(const LockRemoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockRemoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {
    _internal_set_page_buf(from._internal_page_buf());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
}

void LockRemoteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockRemoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRemoteReply::CopyFrom(const LockRemoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockRemoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRemoteReply::IsInitialized() const {
  return true;
}

void LockRemoteReply::InternalSwap(LockRemoteReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_buf_.Swap(&other->page_buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockRemoteReply, rc_)
      + sizeof(LockRemoteReply::rc_)
      - PROTOBUF_FIELD_OFFSET(LockRemoteReply, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRemoteReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstanceInitDoneRequest::InitAsDefaultInstance() {
}
class InstanceInitDoneRequest::_Internal {
 public:
};

InstanceInitDoneRequest::InstanceInitDoneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.InstanceInitDoneRequest)
}
InstanceInitDoneRequest::InstanceInitDoneRequest(const InstanceInitDoneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.InstanceInitDoneRequest)
}

void InstanceInitDoneRequest::SharedCtor() {
  instance_id_ = 0;
}

InstanceInitDoneRequest::~InstanceInitDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.InstanceInitDoneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstanceInitDoneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstanceInitDoneRequest::ArenaDtor(void* object) {
  InstanceInitDoneRequest* _this = reinterpret_cast< InstanceInitDoneRequest* >(object);
  (void)_this;
}
void InstanceInitDoneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceInitDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstanceInitDoneRequest& InstanceInitDoneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstanceInitDoneRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InstanceInitDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InstanceInitDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceInitDoneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceInitDoneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InstanceInitDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InstanceInitDoneRequest)
  return target;
}

size_t InstanceInitDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InstanceInitDoneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceInitDoneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InstanceInitDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceInitDoneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstanceInitDoneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InstanceInitDoneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InstanceInitDoneRequest)
    MergeFrom(*source);
  }
}

void InstanceInitDoneRequest::MergeFrom(const InstanceInitDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InstanceInitDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
}

void InstanceInitDoneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InstanceInitDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInitDoneRequest::CopyFrom(const InstanceInitDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InstanceInitDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInitDoneRequest::IsInitialized() const {
  return true;
}

void InstanceInitDoneRequest::InternalSwap(InstanceInitDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(instance_id_, other->instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceInitDoneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstanceInitDoneReply::InitAsDefaultInstance() {
}
class InstanceInitDoneReply::_Internal {
 public:
};

InstanceInitDoneReply::InstanceInitDoneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.InstanceInitDoneReply)
}
InstanceInitDoneReply::InstanceInitDoneReply(const InstanceInitDoneReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.InstanceInitDoneReply)
}

void InstanceInitDoneReply::SharedCtor() {
}

InstanceInitDoneReply::~InstanceInitDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.InstanceInitDoneReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstanceInitDoneReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstanceInitDoneReply::ArenaDtor(void* object) {
  InstanceInitDoneReply* _this = reinterpret_cast< InstanceInitDoneReply* >(object);
  (void)_this;
}
void InstanceInitDoneReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceInitDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstanceInitDoneReply& InstanceInitDoneReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstanceInitDoneReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InstanceInitDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InstanceInitDoneReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceInitDoneReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceInitDoneReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InstanceInitDoneReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InstanceInitDoneReply)
  return target;
}

size_t InstanceInitDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InstanceInitDoneReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceInitDoneReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InstanceInitDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceInitDoneReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstanceInitDoneReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InstanceInitDoneReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InstanceInitDoneReply)
    MergeFrom(*source);
  }
}

void InstanceInitDoneReply::MergeFrom(const InstanceInitDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InstanceInitDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InstanceInitDoneReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InstanceInitDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInitDoneReply::CopyFrom(const InstanceInitDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InstanceInitDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInitDoneReply::IsInitialized() const {
  return true;
}

void InstanceInitDoneReply::InternalSwap(InstanceInitDoneReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceInitDoneReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalLockInitDoneRequest::InitAsDefaultInstance() {
}
class GlobalLockInitDoneRequest::_Internal {
 public:
};

GlobalLockInitDoneRequest::GlobalLockInitDoneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.GlobalLockInitDoneRequest)
}
GlobalLockInitDoneRequest::GlobalLockInitDoneRequest(const GlobalLockInitDoneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.GlobalLockInitDoneRequest)
}

void GlobalLockInitDoneRequest::SharedCtor() {
}

GlobalLockInitDoneRequest::~GlobalLockInitDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GlobalLockInitDoneRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalLockInitDoneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GlobalLockInitDoneRequest::ArenaDtor(void* object) {
  GlobalLockInitDoneRequest* _this = reinterpret_cast< GlobalLockInitDoneRequest* >(object);
  (void)_this;
}
void GlobalLockInitDoneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalLockInitDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalLockInitDoneRequest& GlobalLockInitDoneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalLockInitDoneRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GlobalLockInitDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GlobalLockInitDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalLockInitDoneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalLockInitDoneRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GlobalLockInitDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GlobalLockInitDoneRequest)
  return target;
}

size_t GlobalLockInitDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GlobalLockInitDoneRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalLockInitDoneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GlobalLockInitDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalLockInitDoneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalLockInitDoneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GlobalLockInitDoneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GlobalLockInitDoneRequest)
    MergeFrom(*source);
  }
}

void GlobalLockInitDoneRequest::MergeFrom(const GlobalLockInitDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GlobalLockInitDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GlobalLockInitDoneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GlobalLockInitDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalLockInitDoneRequest::CopyFrom(const GlobalLockInitDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GlobalLockInitDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLockInitDoneRequest::IsInitialized() const {
  return true;
}

void GlobalLockInitDoneRequest::InternalSwap(GlobalLockInitDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalLockInitDoneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlobalLockInitDoneReply::InitAsDefaultInstance() {
}
class GlobalLockInitDoneReply::_Internal {
 public:
};

GlobalLockInitDoneReply::GlobalLockInitDoneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.GlobalLockInitDoneReply)
}
GlobalLockInitDoneReply::GlobalLockInitDoneReply(const GlobalLockInitDoneReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  init_done_ = from.init_done_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GlobalLockInitDoneReply)
}

void GlobalLockInitDoneReply::SharedCtor() {
  init_done_ = false;
}

GlobalLockInitDoneReply::~GlobalLockInitDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GlobalLockInitDoneReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalLockInitDoneReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GlobalLockInitDoneReply::ArenaDtor(void* object) {
  GlobalLockInitDoneReply* _this = reinterpret_cast< GlobalLockInitDoneReply* >(object);
  (void)_this;
}
void GlobalLockInitDoneReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalLockInitDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalLockInitDoneReply& GlobalLockInitDoneReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalLockInitDoneReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GlobalLockInitDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GlobalLockInitDoneReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  init_done_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalLockInitDoneReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool init_done = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          init_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalLockInitDoneReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GlobalLockInitDoneReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool init_done = 1;
  if (this->init_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_init_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GlobalLockInitDoneReply)
  return target;
}

size_t GlobalLockInitDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GlobalLockInitDoneReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool init_done = 1;
  if (this->init_done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalLockInitDoneReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GlobalLockInitDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalLockInitDoneReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalLockInitDoneReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GlobalLockInitDoneReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GlobalLockInitDoneReply)
    MergeFrom(*source);
  }
}

void GlobalLockInitDoneReply::MergeFrom(const GlobalLockInitDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GlobalLockInitDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.init_done() != 0) {
    _internal_set_init_done(from._internal_init_done());
  }
}

void GlobalLockInitDoneReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GlobalLockInitDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalLockInitDoneReply::CopyFrom(const GlobalLockInitDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GlobalLockInitDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLockInitDoneReply::IsInitialized() const {
  return true;
}

void GlobalLockInitDoneReply::InternalSwap(GlobalLockInitDoneReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(init_done_, other->init_done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalLockInitDoneReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvalidRequest::InitAsDefaultInstance() {
}
class InvalidRequest::_Internal {
 public:
};

InvalidRequest::InvalidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.InvalidRequest)
}
InvalidRequest::InvalidRequest(const InvalidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_buf().empty()) {
    page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_buf(),
      GetArena());
  }
  ::memcpy(&page_id_, &from.page_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.InvalidRequest)
}

void InvalidRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvalidRequest_global_5flock_5fservice_2eproto.base);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
}

InvalidRequest::~InvalidRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.InvalidRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvalidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvalidRequest::ArenaDtor(void* object) {
  InvalidRequest* _this = reinterpret_cast< InvalidRequest* >(object);
  (void)_this;
}
void InvalidRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvalidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvalidRequest& InvalidRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvalidRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InvalidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InvalidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvalidRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 page_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes page_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvalidRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InvalidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_page_id(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_page_buf(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InvalidRequest)
  return target;
}

size_t InvalidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InvalidRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_buf());
  }

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_page_id());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvalidRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InvalidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InvalidRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvalidRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InvalidRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InvalidRequest)
    MergeFrom(*source);
  }
}

void InvalidRequest::MergeFrom(const InvalidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InvalidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {
    _internal_set_page_buf(from._internal_page_buf());
  }
  if (from.page_id() != 0) {
    _internal_set_page_id(from._internal_page_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void InvalidRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InvalidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidRequest::CopyFrom(const InvalidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InvalidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidRequest::IsInitialized() const {
  return true;
}

void InvalidRequest::InternalSwap(InvalidRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_buf_.Swap(&other->page_buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvalidRequest, count_)
      + sizeof(InvalidRequest::count_)
      - PROTOBUF_FIELD_OFFSET(InvalidRequest, page_id_)>(
          reinterpret_cast<char*>(&page_id_),
          reinterpret_cast<char*>(&other->page_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvalidReply::InitAsDefaultInstance() {
}
class InvalidReply::_Internal {
 public:
};

InvalidReply::InvalidReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.InvalidReply)
}
InvalidReply::InvalidReply(const InvalidReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_buf().empty()) {
    page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_buf(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.InvalidReply)
}

void InvalidReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvalidReply_global_5flock_5fservice_2eproto.base);
  page_buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
}

InvalidReply::~InvalidReply() {
  // @@protoc_insertion_point(destructor:dbx1000.InvalidReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvalidReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvalidReply::ArenaDtor(void* object) {
  InvalidReply* _this = reinterpret_cast< InvalidReply* >(object);
  (void)_this;
}
void InvalidReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvalidReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvalidReply& InvalidReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvalidReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InvalidReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InvalidReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvalidReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dbx1000.RpcRC rc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::dbx1000::RpcRC>(val));
        } else goto handle_unusual;
        continue;
      // bytes page_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvalidReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InvalidReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dbx1000.RpcRC rc = 1;
  if (this->rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_page_buf(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InvalidReply)
  return target;
}

size_t InvalidReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InvalidReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_page_buf());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // .dbx1000.RpcRC rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvalidReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InvalidReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InvalidReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvalidReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InvalidReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InvalidReply)
    MergeFrom(*source);
  }
}

void InvalidReply::MergeFrom(const InvalidReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InvalidReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {
    _internal_set_page_buf(from._internal_page_buf());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
}

void InvalidReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InvalidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidReply::CopyFrom(const InvalidReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InvalidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidReply::IsInitialized() const {
  return true;
}

void InvalidReply::InternalSwap(InvalidReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_buf_.Swap(&other->page_buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvalidReply, rc_)
      + sizeof(InvalidReply::rc_)
      - PROTOBUF_FIELD_OFFSET(InvalidReply, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNextTsRequest::InitAsDefaultInstance() {
}
class GetNextTsRequest::_Internal {
 public:
};

GetNextTsRequest::GetNextTsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.GetNextTsRequest)
}
GetNextTsRequest::GetNextTsRequest(const GetNextTsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetNextTsRequest)
}

void GetNextTsRequest::SharedCtor() {
}

GetNextTsRequest::~GetNextTsRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetNextTsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNextTsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNextTsRequest::ArenaDtor(void* object) {
  GetNextTsRequest* _this = reinterpret_cast< GetNextTsRequest* >(object);
  (void)_this;
}
void GetNextTsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNextTsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNextTsRequest& GetNextTsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNextTsRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetNextTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetNextTsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNextTsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNextTsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetNextTsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetNextTsRequest)
  return target;
}

size_t GetNextTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetNextTsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNextTsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetNextTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNextTsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNextTsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetNextTsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetNextTsRequest)
    MergeFrom(*source);
  }
}

void GetNextTsRequest::MergeFrom(const GetNextTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetNextTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNextTsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetNextTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNextTsRequest::CopyFrom(const GetNextTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetNextTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNextTsRequest::IsInitialized() const {
  return true;
}

void GetNextTsRequest::InternalSwap(GetNextTsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNextTsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNextTsReply::InitAsDefaultInstance() {
}
class GetNextTsReply::_Internal {
 public:
};

GetNextTsReply::GetNextTsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.GetNextTsReply)
}
GetNextTsReply::GetNextTsReply(const GetNextTsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetNextTsReply)
}

void GetNextTsReply::SharedCtor() {
  ts_ = PROTOBUF_ULONGLONG(0);
}

GetNextTsReply::~GetNextTsReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetNextTsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNextTsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNextTsReply::ArenaDtor(void* object) {
  GetNextTsReply* _this = reinterpret_cast< GetNextTsReply* >(object);
  (void)_this;
}
void GetNextTsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNextTsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNextTsReply& GetNextTsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNextTsReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetNextTsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetNextTsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNextTsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNextTsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetNextTsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetNextTsReply)
  return target;
}

size_t GetNextTsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetNextTsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNextTsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetNextTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNextTsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNextTsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetNextTsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetNextTsReply)
    MergeFrom(*source);
  }
}

void GetNextTsReply::MergeFrom(const GetNextTsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetNextTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void GetNextTsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetNextTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNextTsReply::CopyFrom(const GetNextTsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetNextTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNextTsReply::IsInitialized() const {
  return true;
}

void GetNextTsReply::InternalSwap(GetNextTsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNextTsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequest::InitAsDefaultInstance() {
}
class TestRequest::_Internal {
 public:
};

TestRequest::TestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.TestRequest)
}

void TestRequest::SharedCtor() {
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.TestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestRequest::ArenaDtor(void* object) {
  TestRequest* _this = reinterpret_cast< TestRequest* >(object);
  (void)_this;
}
void TestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequest& TestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequest_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TestRequest)
  return target;
}

size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TestRequest)
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestReply::InitAsDefaultInstance() {
}
class TestReply::_Internal {
 public:
};

TestReply::TestReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dbx1000.TestReply)
}
TestReply::TestReply(const TestReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.TestReply)
}

void TestReply::SharedCtor() {
  rc_ = 0;
}

TestReply::~TestReply() {
  // @@protoc_insertion_point(destructor:dbx1000.TestReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestReply::ArenaDtor(void* object) {
  TestReply* _this = reinterpret_cast< TestReply* >(object);
  (void)_this;
}
void TestReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReply& TestReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReply_global_5flock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TestReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TestReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TestReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TestReply)
  return target;
}

size_t TestReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TestReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TestReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TestReply)
    MergeFrom(*source);
  }
}

void TestReply::MergeFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
}

void TestReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReply::CopyFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReply::IsInitialized() const {
  return true;
}

void TestReply::InternalSwap(TestReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rc_, other->rc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GlobalLockService::~GlobalLockService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GlobalLockService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_global_5flock_5fservice_2eproto);
  return file_level_service_descriptors_global_5flock_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GlobalLockService::GetDescriptor() {
  return descriptor();
}

void GlobalLockService::LockRemote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::LockRemoteRequest*,
                         ::dbx1000::LockRemoteReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LockRemote() not implemented.");
  done->Run();
}

void GlobalLockService::InstanceInitDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::InstanceInitDoneRequest*,
                         ::dbx1000::InstanceInitDoneReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InstanceInitDone() not implemented.");
  done->Run();
}

void GlobalLockService::GlobalLockInitDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::GlobalLockInitDoneRequest*,
                         ::dbx1000::GlobalLockInitDoneReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GlobalLockInitDone() not implemented.");
  done->Run();
}

void GlobalLockService::GetNextTs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::GetNextTsRequest*,
                         ::dbx1000::GetNextTsReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNextTs() not implemented.");
  done->Run();
}

void GlobalLockService::Invalid(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::InvalidRequest*,
                         ::dbx1000::InvalidReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Invalid() not implemented.");
  done->Run();
}

void GlobalLockService::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dbx1000::TestRequest*,
                         ::dbx1000::TestReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Test() not implemented.");
  done->Run();
}

void GlobalLockService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_global_5flock_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      LockRemote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::LockRemoteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::LockRemoteReply*>(
                 response),
             done);
      break;
    case 1:
      InstanceInitDone(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::InstanceInitDoneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::InstanceInitDoneReply*>(
                 response),
             done);
      break;
    case 2:
      GlobalLockInitDone(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::GlobalLockInitDoneRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::GlobalLockInitDoneReply*>(
                 response),
             done);
      break;
    case 3:
      GetNextTs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::GetNextTsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::GetNextTsReply*>(
                 response),
             done);
      break;
    case 4:
      Invalid(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::InvalidRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::InvalidReply*>(
                 response),
             done);
      break;
    case 5:
      Test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dbx1000::TestRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dbx1000::TestReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GlobalLockService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dbx1000::LockRemoteRequest::default_instance();
    case 1:
      return ::dbx1000::InstanceInitDoneRequest::default_instance();
    case 2:
      return ::dbx1000::GlobalLockInitDoneRequest::default_instance();
    case 3:
      return ::dbx1000::GetNextTsRequest::default_instance();
    case 4:
      return ::dbx1000::InvalidRequest::default_instance();
    case 5:
      return ::dbx1000::TestRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GlobalLockService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dbx1000::LockRemoteReply::default_instance();
    case 1:
      return ::dbx1000::InstanceInitDoneReply::default_instance();
    case 2:
      return ::dbx1000::GlobalLockInitDoneReply::default_instance();
    case 3:
      return ::dbx1000::GetNextTsReply::default_instance();
    case 4:
      return ::dbx1000::InvalidReply::default_instance();
    case 5:
      return ::dbx1000::TestReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GlobalLockService_Stub::GlobalLockService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GlobalLockService_Stub::GlobalLockService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GlobalLockService_Stub::~GlobalLockService_Stub() {
  if (owns_channel_) delete channel_;
}

void GlobalLockService_Stub::LockRemote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::LockRemoteRequest* request,
                              ::dbx1000::LockRemoteReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GlobalLockService_Stub::InstanceInitDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::InstanceInitDoneRequest* request,
                              ::dbx1000::InstanceInitDoneReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GlobalLockService_Stub::GlobalLockInitDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::GlobalLockInitDoneRequest* request,
                              ::dbx1000::GlobalLockInitDoneReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GlobalLockService_Stub::GetNextTs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::GetNextTsRequest* request,
                              ::dbx1000::GetNextTsReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GlobalLockService_Stub::Invalid(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::InvalidRequest* request,
                              ::dbx1000::InvalidReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GlobalLockService_Stub::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dbx1000::TestRequest* request,
                              ::dbx1000::TestReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbx1000
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dbx1000::LockRemoteRequest* Arena::CreateMaybeMessage< ::dbx1000::LockRemoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::LockRemoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::LockRemoteReply* Arena::CreateMaybeMessage< ::dbx1000::LockRemoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::LockRemoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::InstanceInitDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::InstanceInitDoneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::InstanceInitDoneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::InstanceInitDoneReply* Arena::CreateMaybeMessage< ::dbx1000::InstanceInitDoneReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::InstanceInitDoneReply >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::GlobalLockInitDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::GlobalLockInitDoneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::GlobalLockInitDoneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::GlobalLockInitDoneReply* Arena::CreateMaybeMessage< ::dbx1000::GlobalLockInitDoneReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::GlobalLockInitDoneReply >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::InvalidRequest* Arena::CreateMaybeMessage< ::dbx1000::InvalidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::InvalidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::InvalidReply* Arena::CreateMaybeMessage< ::dbx1000::InvalidReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::InvalidReply >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::GetNextTsRequest* Arena::CreateMaybeMessage< ::dbx1000::GetNextTsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::GetNextTsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::GetNextTsReply* Arena::CreateMaybeMessage< ::dbx1000::GetNextTsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::GetNextTsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::TestRequest* Arena::CreateMaybeMessage< ::dbx1000::TestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::TestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dbx1000::TestReply* Arena::CreateMaybeMessage< ::dbx1000::TestReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dbx1000::TestReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
