// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_disk_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shared_5fdisk_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_5fdisk_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shared_5fdisk_5fservice_2eproto;
namespace dbx1000 {
class CloseAllReply;
class CloseAllReplyDefaultTypeInternal;
extern CloseAllReplyDefaultTypeInternal _CloseAllReply_default_instance_;
class CloseAllRequest;
class CloseAllRequestDefaultTypeInternal;
extern CloseAllRequestDefaultTypeInternal _CloseAllRequest_default_instance_;
class CloseReply;
class CloseReplyDefaultTypeInternal;
extern CloseReplyDefaultTypeInternal _CloseReply_default_instance_;
class CloseRequest;
class CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class OpenReply;
class OpenReplyDefaultTypeInternal;
extern OpenReplyDefaultTypeInternal _OpenReply_default_instance_;
class OpenRequest;
class OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
class ReadPageReply;
class ReadPageReplyDefaultTypeInternal;
extern ReadPageReplyDefaultTypeInternal _ReadPageReply_default_instance_;
class ReadPageRequest;
class ReadPageRequestDefaultTypeInternal;
extern ReadPageRequestDefaultTypeInternal _ReadPageRequest_default_instance_;
class ReadReply;
class ReadReplyDefaultTypeInternal;
extern ReadReplyDefaultTypeInternal _ReadReply_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class WritePageReply;
class WritePageReplyDefaultTypeInternal;
extern WritePageReplyDefaultTypeInternal _WritePageReply_default_instance_;
class WritePageRequest;
class WritePageRequestDefaultTypeInternal;
extern WritePageRequestDefaultTypeInternal _WritePageRequest_default_instance_;
class WriteReply;
class WriteReplyDefaultTypeInternal;
extern WriteReplyDefaultTypeInternal _WriteReply_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace dbx1000
PROTOBUF_NAMESPACE_OPEN
template<> ::dbx1000::CloseAllReply* Arena::CreateMaybeMessage<::dbx1000::CloseAllReply>(Arena*);
template<> ::dbx1000::CloseAllRequest* Arena::CreateMaybeMessage<::dbx1000::CloseAllRequest>(Arena*);
template<> ::dbx1000::CloseReply* Arena::CreateMaybeMessage<::dbx1000::CloseReply>(Arena*);
template<> ::dbx1000::CloseRequest* Arena::CreateMaybeMessage<::dbx1000::CloseRequest>(Arena*);
template<> ::dbx1000::OpenReply* Arena::CreateMaybeMessage<::dbx1000::OpenReply>(Arena*);
template<> ::dbx1000::OpenRequest* Arena::CreateMaybeMessage<::dbx1000::OpenRequest>(Arena*);
template<> ::dbx1000::ReadPageReply* Arena::CreateMaybeMessage<::dbx1000::ReadPageReply>(Arena*);
template<> ::dbx1000::ReadPageRequest* Arena::CreateMaybeMessage<::dbx1000::ReadPageRequest>(Arena*);
template<> ::dbx1000::ReadReply* Arena::CreateMaybeMessage<::dbx1000::ReadReply>(Arena*);
template<> ::dbx1000::ReadRequest* Arena::CreateMaybeMessage<::dbx1000::ReadRequest>(Arena*);
template<> ::dbx1000::WritePageReply* Arena::CreateMaybeMessage<::dbx1000::WritePageReply>(Arena*);
template<> ::dbx1000::WritePageRequest* Arena::CreateMaybeMessage<::dbx1000::WritePageRequest>(Arena*);
template<> ::dbx1000::WriteReply* Arena::CreateMaybeMessage<::dbx1000::WriteReply>(Arena*);
template<> ::dbx1000::WriteRequest* Arena::CreateMaybeMessage<::dbx1000::WriteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dbx1000 {

// ===================================================================

class OpenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.OpenRequest) */ {
 public:
  inline OpenRequest() : OpenRequest(nullptr) {}
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);
  OpenRequest(OpenRequest&& from) noexcept
    : OpenRequest() {
    *this = ::std::move(from);
  }

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
               &_OpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenRequest& a, OpenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const final {
    return CreateMaybeMessage<OpenRequest>(nullptr);
  }

  OpenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.OpenRequest";
  }
  protected:
  explicit OpenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.OpenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OpenReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.OpenReply) */ {
 public:
  inline OpenReply() : OpenReply(nullptr) {}
  virtual ~OpenReply();

  OpenReply(const OpenReply& from);
  OpenReply(OpenReply&& from) noexcept
    : OpenReply() {
    *this = ::std::move(from);
  }

  inline OpenReply& operator=(const OpenReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenReply& operator=(OpenReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenReply* internal_default_instance() {
    return reinterpret_cast<const OpenReply*>(
               &_OpenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenReply& a, OpenReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenReply* New() const final {
    return CreateMaybeMessage<OpenReply>(nullptr);
  }

  OpenReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenReply& from);
  void MergeFrom(const OpenReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.OpenReply";
  }
  protected:
  explicit OpenReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 1,
  };
  // int32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.OpenReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 2,
    kSizeFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kFdFieldNumber = 1,
  };
  // bytes buf = 2;
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WriteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.WriteReply) */ {
 public:
  inline WriteReply() : WriteReply(nullptr) {}
  virtual ~WriteReply();

  WriteReply(const WriteReply& from);
  WriteReply(WriteReply&& from) noexcept
    : WriteReply() {
    *this = ::std::move(from);
  }

  inline WriteReply& operator=(const WriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteReply& operator=(WriteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteReply* internal_default_instance() {
    return reinterpret_cast<const WriteReply*>(
               &_WriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteReply& a, WriteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteReply* New() const final {
    return CreateMaybeMessage<WriteReply>(nullptr);
  }

  WriteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteReply& from);
  void MergeFrom(const WriteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.WriteReply";
  }
  protected:
  explicit WriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.WriteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadRequest) */ {
 public:
  inline ReadRequest() : ReadRequest(nullptr) {}
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.ReadRequest";
  }
  protected:
  explicit ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kFdFieldNumber = 1,
  };
  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.ReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReadReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadReply) */ {
 public:
  inline ReadReply() : ReadReply(nullptr) {}
  virtual ~ReadReply();

  ReadReply(const ReadReply& from);
  ReadReply(ReadReply&& from) noexcept
    : ReadReply() {
    *this = ::std::move(from);
  }

  inline ReadReply& operator=(const ReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReply& operator=(ReadReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReply* internal_default_instance() {
    return reinterpret_cast<const ReadReply*>(
               &_ReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadReply& a, ReadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReply* New() const final {
    return CreateMaybeMessage<ReadReply>(nullptr);
  }

  ReadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReply& from);
  void MergeFrom(const ReadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.ReadReply";
  }
  protected:
  explicit ReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // bytes buf = 1;
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.ReadReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WritePageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.WritePageRequest) */ {
 public:
  inline WritePageRequest() : WritePageRequest(nullptr) {}
  virtual ~WritePageRequest();

  WritePageRequest(const WritePageRequest& from);
  WritePageRequest(WritePageRequest&& from) noexcept
    : WritePageRequest() {
    *this = ::std::move(from);
  }

  inline WritePageRequest& operator=(const WritePageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WritePageRequest& operator=(WritePageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WritePageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WritePageRequest* internal_default_instance() {
    return reinterpret_cast<const WritePageRequest*>(
               &_WritePageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WritePageRequest& a, WritePageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WritePageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WritePageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WritePageRequest* New() const final {
    return CreateMaybeMessage<WritePageRequest>(nullptr);
  }

  WritePageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WritePageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WritePageRequest& from);
  void MergeFrom(const WritePageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WritePageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.WritePageRequest";
  }
  protected:
  explicit WritePageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageBufFieldNumber = 2,
    kPageIdFieldNumber = 1,
  };
  // bytes page_buf = 2;
  void clear_page_buf();
  const std::string& page_buf() const;
  void set_page_buf(const std::string& value);
  void set_page_buf(std::string&& value);
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  std::string* mutable_page_buf();
  std::string* release_page_buf();
  void set_allocated_page_buf(std::string* page_buf);
  private:
  const std::string& _internal_page_buf() const;
  void _internal_set_page_buf(const std::string& value);
  std::string* _internal_mutable_page_buf();
  public:

  // uint64 page_id = 1;
  void clear_page_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id() const;
  void set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_page_id() const;
  void _internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.WritePageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_buf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WritePageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.WritePageReply) */ {
 public:
  inline WritePageReply() : WritePageReply(nullptr) {}
  virtual ~WritePageReply();

  WritePageReply(const WritePageReply& from);
  WritePageReply(WritePageReply&& from) noexcept
    : WritePageReply() {
    *this = ::std::move(from);
  }

  inline WritePageReply& operator=(const WritePageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WritePageReply& operator=(WritePageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WritePageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WritePageReply* internal_default_instance() {
    return reinterpret_cast<const WritePageReply*>(
               &_WritePageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WritePageReply& a, WritePageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WritePageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WritePageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WritePageReply* New() const final {
    return CreateMaybeMessage<WritePageReply>(nullptr);
  }

  WritePageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WritePageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WritePageReply& from);
  void MergeFrom(const WritePageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WritePageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.WritePageReply";
  }
  protected:
  explicit WritePageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.WritePageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReadPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadPageRequest) */ {
 public:
  inline ReadPageRequest() : ReadPageRequest(nullptr) {}
  virtual ~ReadPageRequest();

  ReadPageRequest(const ReadPageRequest& from);
  ReadPageRequest(ReadPageRequest&& from) noexcept
    : ReadPageRequest() {
    *this = ::std::move(from);
  }

  inline ReadPageRequest& operator=(const ReadPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadPageRequest& operator=(ReadPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadPageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadPageRequest* internal_default_instance() {
    return reinterpret_cast<const ReadPageRequest*>(
               &_ReadPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadPageRequest& a, ReadPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadPageRequest* New() const final {
    return CreateMaybeMessage<ReadPageRequest>(nullptr);
  }

  ReadPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadPageRequest& from);
  void MergeFrom(const ReadPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.ReadPageRequest";
  }
  protected:
  explicit ReadPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageIdFieldNumber = 1,
  };
  // uint64 page_id = 1;
  void clear_page_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id() const;
  void set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_page_id() const;
  void _internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.ReadPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReadPageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadPageReply) */ {
 public:
  inline ReadPageReply() : ReadPageReply(nullptr) {}
  virtual ~ReadPageReply();

  ReadPageReply(const ReadPageReply& from);
  ReadPageReply(ReadPageReply&& from) noexcept
    : ReadPageReply() {
    *this = ::std::move(from);
  }

  inline ReadPageReply& operator=(const ReadPageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadPageReply& operator=(ReadPageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadPageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadPageReply* internal_default_instance() {
    return reinterpret_cast<const ReadPageReply*>(
               &_ReadPageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadPageReply& a, ReadPageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadPageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadPageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadPageReply* New() const final {
    return CreateMaybeMessage<ReadPageReply>(nullptr);
  }

  ReadPageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadPageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadPageReply& from);
  void MergeFrom(const ReadPageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadPageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.ReadPageReply";
  }
  protected:
  explicit ReadPageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageBufFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // bytes page_buf = 1;
  void clear_page_buf();
  const std::string& page_buf() const;
  void set_page_buf(const std::string& value);
  void set_page_buf(std::string&& value);
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  std::string* mutable_page_buf();
  std::string* release_page_buf();
  void set_allocated_page_buf(std::string* page_buf);
  private:
  const std::string& _internal_page_buf() const;
  void _internal_set_page_buf(const std::string& value);
  std::string* _internal_mutable_page_buf();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.ReadPageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_buf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CloseAllRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseAllRequest) */ {
 public:
  inline CloseAllRequest() : CloseAllRequest(nullptr) {}
  virtual ~CloseAllRequest();

  CloseAllRequest(const CloseAllRequest& from);
  CloseAllRequest(CloseAllRequest&& from) noexcept
    : CloseAllRequest() {
    *this = ::std::move(from);
  }

  inline CloseAllRequest& operator=(const CloseAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseAllRequest& operator=(CloseAllRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseAllRequest* internal_default_instance() {
    return reinterpret_cast<const CloseAllRequest*>(
               &_CloseAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CloseAllRequest& a, CloseAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseAllRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseAllRequest* New() const final {
    return CreateMaybeMessage<CloseAllRequest>(nullptr);
  }

  CloseAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseAllRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseAllRequest& from);
  void MergeFrom(const CloseAllRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseAllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.CloseAllRequest";
  }
  protected:
  explicit CloseAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.CloseAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CloseAllReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseAllReply) */ {
 public:
  inline CloseAllReply() : CloseAllReply(nullptr) {}
  virtual ~CloseAllReply();

  CloseAllReply(const CloseAllReply& from);
  CloseAllReply(CloseAllReply&& from) noexcept
    : CloseAllReply() {
    *this = ::std::move(from);
  }

  inline CloseAllReply& operator=(const CloseAllReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseAllReply& operator=(CloseAllReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseAllReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseAllReply* internal_default_instance() {
    return reinterpret_cast<const CloseAllReply*>(
               &_CloseAllReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseAllReply& a, CloseAllReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseAllReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseAllReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseAllReply* New() const final {
    return CreateMaybeMessage<CloseAllReply>(nullptr);
  }

  CloseAllReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseAllReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseAllReply& from);
  void MergeFrom(const CloseAllReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseAllReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.CloseAllReply";
  }
  protected:
  explicit CloseAllReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcFieldNumber = 1,
  };
  // int32 rc = 1;
  void clear_rc();
  ::PROTOBUF_NAMESPACE_ID::int32 rc() const;
  void set_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rc() const;
  void _internal_set_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.CloseAllReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 rc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CloseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseRequest) */ {
 public:
  inline CloseRequest() : CloseRequest(nullptr) {}
  virtual ~CloseRequest();

  CloseRequest(const CloseRequest& from);
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseRequest* New() const final {
    return CreateMaybeMessage<CloseRequest>(nullptr);
  }

  CloseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseRequest& from);
  void MergeFrom(const CloseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.CloseRequest";
  }
  protected:
  explicit CloseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 1,
  };
  // int32 fd = 1;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.CloseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CloseReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseReply) */ {
 public:
  inline CloseReply() : CloseReply(nullptr) {}
  virtual ~CloseReply();

  CloseReply(const CloseReply& from);
  CloseReply(CloseReply&& from) noexcept
    : CloseReply() {
    *this = ::std::move(from);
  }

  inline CloseReply& operator=(const CloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseReply& operator=(CloseReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseReply* internal_default_instance() {
    return reinterpret_cast<const CloseReply*>(
               &_CloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CloseReply& a, CloseReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseReply* New() const final {
    return CreateMaybeMessage<CloseReply>(nullptr);
  }

  CloseReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseReply& from);
  void MergeFrom(const CloseReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbx1000.CloseReply";
  }
  protected:
  explicit CloseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_5fdisk_5fservice_2eproto);
    return ::descriptor_table_shared_5fdisk_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcFieldNumber = 1,
  };
  // int32 rc = 1;
  void clear_rc();
  ::PROTOBUF_NAMESPACE_ID::int32 rc() const;
  void set_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rc() const;
  void _internal_set_rc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbx1000.CloseReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 rc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_5fdisk_5fservice_2eproto;
};
// ===================================================================

class SharedDiskService_Stub;

class SharedDiskService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SharedDiskService() {};
 public:
  virtual ~SharedDiskService();

  typedef SharedDiskService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::OpenRequest* request,
                       ::dbx1000::OpenReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::WriteRequest* request,
                       ::dbx1000::WriteReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::ReadRequest* request,
                       ::dbx1000::ReadReply* response,
                       ::google::protobuf::Closure* done);
  virtual void WritePage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::WritePageRequest* request,
                       ::dbx1000::WritePageReply* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::ReadPageRequest* request,
                       ::dbx1000::ReadPageReply* response,
                       ::google::protobuf::Closure* done);
  virtual void CloseAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::CloseAllRequest* request,
                       ::dbx1000::CloseAllReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Close(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::CloseRequest* request,
                       ::dbx1000::CloseReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SharedDiskService);
};

class SharedDiskService_Stub : public SharedDiskService {
 public:
  SharedDiskService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SharedDiskService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SharedDiskService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SharedDiskService ------------------------------------------

  void Open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::OpenRequest* request,
                       ::dbx1000::OpenReply* response,
                       ::google::protobuf::Closure* done);
  void Write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::WriteRequest* request,
                       ::dbx1000::WriteReply* response,
                       ::google::protobuf::Closure* done);
  void Read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::ReadRequest* request,
                       ::dbx1000::ReadReply* response,
                       ::google::protobuf::Closure* done);
  void WritePage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::WritePageRequest* request,
                       ::dbx1000::WritePageReply* response,
                       ::google::protobuf::Closure* done);
  void ReadPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::ReadPageRequest* request,
                       ::dbx1000::ReadPageReply* response,
                       ::google::protobuf::Closure* done);
  void CloseAll(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::CloseAllRequest* request,
                       ::dbx1000::CloseAllReply* response,
                       ::google::protobuf::Closure* done);
  void Close(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dbx1000::CloseRequest* request,
                       ::dbx1000::CloseReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SharedDiskService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenRequest

// string path = 1;
inline void OpenRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpenRequest::path() const {
  // @@protoc_insertion_point(field_get:dbx1000.OpenRequest.path)
  return _internal_path();
}
inline void OpenRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:dbx1000.OpenRequest.path)
}
inline std::string* OpenRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:dbx1000.OpenRequest.path)
  return _internal_mutable_path();
}
inline const std::string& OpenRequest::_internal_path() const {
  return path_.Get();
}
inline void OpenRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpenRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.OpenRequest.path)
}
inline void OpenRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dbx1000.OpenRequest.path)
}
inline void OpenRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dbx1000.OpenRequest.path)
}
inline std::string* OpenRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpenRequest::release_path() {
  // @@protoc_insertion_point(field_release:dbx1000.OpenRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dbx1000.OpenRequest.path)
}

// -------------------------------------------------------------------

// OpenReply

// int32 fd = 1;
inline void OpenReply::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenReply::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenReply::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.OpenReply.fd)
  return _internal_fd();
}
inline void OpenReply::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void OpenReply::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:dbx1000.OpenReply.fd)
}

// -------------------------------------------------------------------

// WriteRequest

// int32 fd = 1;
inline void WriteRequest::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.fd)
  return _internal_fd();
}
inline void WriteRequest::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void WriteRequest::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.fd)
}

// bytes buf = 2;
inline void WriteRequest::clear_buf() {
  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteRequest::buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.buf)
  return _internal_buf();
}
inline void WriteRequest::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.buf)
}
inline std::string* WriteRequest::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:dbx1000.WriteRequest.buf)
  return _internal_mutable_buf();
}
inline const std::string& WriteRequest::_internal_buf() const {
  return buf_.Get();
}
inline void WriteRequest::_internal_set_buf(const std::string& value) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteRequest::set_buf(std::string&& value) {
  
  buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.WriteRequest.buf)
}
inline void WriteRequest::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dbx1000.WriteRequest.buf)
}
inline void WriteRequest::set_buf(const void* value,
    size_t size) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dbx1000.WriteRequest.buf)
}
inline std::string* WriteRequest::_internal_mutable_buf() {
  
  return buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteRequest::release_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.WriteRequest.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteRequest::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dbx1000.WriteRequest.buf)
}

// uint64 size = 3;
inline void WriteRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.size)
  return _internal_size();
}
inline void WriteRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void WriteRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.size)
}

// int64 offset = 4;
inline void WriteRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.offset)
  return _internal_offset();
}
inline void WriteRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void WriteRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.offset)
}

// -------------------------------------------------------------------

// WriteReply

// uint64 size = 1;
inline void WriteReply::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteReply.size)
  return _internal_size();
}
inline void WriteReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void WriteReply::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteReply.size)
}

// -------------------------------------------------------------------

// ReadRequest

// int32 fd = 1;
inline void ReadRequest::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequest::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.fd)
  return _internal_fd();
}
inline void ReadRequest::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void ReadRequest::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.fd)
}

// uint64 size = 2;
inline void ReadRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.size)
  return _internal_size();
}
inline void ReadRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void ReadRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.size)
}

// int64 offset = 3;
inline void ReadRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.offset)
  return _internal_offset();
}
inline void ReadRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void ReadRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.offset)
}

// -------------------------------------------------------------------

// ReadReply

// bytes buf = 1;
inline void ReadReply::clear_buf() {
  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReply::buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadReply.buf)
  return _internal_buf();
}
inline void ReadReply::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadReply.buf)
}
inline std::string* ReadReply::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:dbx1000.ReadReply.buf)
  return _internal_mutable_buf();
}
inline const std::string& ReadReply::_internal_buf() const {
  return buf_.Get();
}
inline void ReadReply::_internal_set_buf(const std::string& value) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReply::set_buf(std::string&& value) {
  
  buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.ReadReply.buf)
}
inline void ReadReply::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dbx1000.ReadReply.buf)
}
inline void ReadReply::set_buf(const void* value,
    size_t size) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dbx1000.ReadReply.buf)
}
inline std::string* ReadReply::_internal_mutable_buf() {
  
  return buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReply::release_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.ReadReply.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReply::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dbx1000.ReadReply.buf)
}

// uint64 size = 2;
inline void ReadReply::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadReply.size)
  return _internal_size();
}
inline void ReadReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void ReadReply::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadReply.size)
}

// -------------------------------------------------------------------

// WritePageRequest

// uint64 page_id = 1;
inline void WritePageRequest::clear_page_id() {
  page_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WritePageRequest::_internal_page_id() const {
  return page_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WritePageRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageRequest.page_id)
  return _internal_page_id();
}
inline void WritePageRequest::_internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  page_id_ = value;
}
inline void WritePageRequest::set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_page_id(value);
  // @@protoc_insertion_point(field_set:dbx1000.WritePageRequest.page_id)
}

// bytes page_buf = 2;
inline void WritePageRequest::clear_page_buf() {
  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WritePageRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageRequest.page_buf)
  return _internal_page_buf();
}
inline void WritePageRequest::set_page_buf(const std::string& value) {
  _internal_set_page_buf(value);
  // @@protoc_insertion_point(field_set:dbx1000.WritePageRequest.page_buf)
}
inline std::string* WritePageRequest::mutable_page_buf() {
  // @@protoc_insertion_point(field_mutable:dbx1000.WritePageRequest.page_buf)
  return _internal_mutable_page_buf();
}
inline const std::string& WritePageRequest::_internal_page_buf() const {
  return page_buf_.Get();
}
inline void WritePageRequest::_internal_set_page_buf(const std::string& value) {
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WritePageRequest::set_page_buf(std::string&& value) {
  
  page_buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.WritePageRequest.page_buf)
}
inline void WritePageRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dbx1000.WritePageRequest.page_buf)
}
inline void WritePageRequest::set_page_buf(const void* value,
    size_t size) {
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dbx1000.WritePageRequest.page_buf)
}
inline std::string* WritePageRequest::_internal_mutable_page_buf() {
  
  return page_buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WritePageRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.WritePageRequest.page_buf)
  return page_buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WritePageRequest::set_allocated_page_buf(std::string* page_buf) {
  if (page_buf != nullptr) {
    
  } else {
    
  }
  page_buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dbx1000.WritePageRequest.page_buf)
}

// -------------------------------------------------------------------

// WritePageReply

// uint64 size = 1;
inline void WritePageReply::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WritePageReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WritePageReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageReply.size)
  return _internal_size();
}
inline void WritePageReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void WritePageReply::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.WritePageReply.size)
}

// -------------------------------------------------------------------

// ReadPageRequest

// uint64 page_id = 1;
inline void ReadPageRequest::clear_page_id() {
  page_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadPageRequest::_internal_page_id() const {
  return page_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadPageRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageRequest.page_id)
  return _internal_page_id();
}
inline void ReadPageRequest::_internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  page_id_ = value;
}
inline void ReadPageRequest::set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_page_id(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageRequest.page_id)
}

// -------------------------------------------------------------------

// ReadPageReply

// bytes page_buf = 1;
inline void ReadPageReply::clear_page_buf() {
  page_buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadPageReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageReply.page_buf)
  return _internal_page_buf();
}
inline void ReadPageReply::set_page_buf(const std::string& value) {
  _internal_set_page_buf(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageReply.page_buf)
}
inline std::string* ReadPageReply::mutable_page_buf() {
  // @@protoc_insertion_point(field_mutable:dbx1000.ReadPageReply.page_buf)
  return _internal_mutable_page_buf();
}
inline const std::string& ReadPageReply::_internal_page_buf() const {
  return page_buf_.Get();
}
inline void ReadPageReply::_internal_set_page_buf(const std::string& value) {
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadPageReply::set_page_buf(std::string&& value) {
  
  page_buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.ReadPageReply.page_buf)
}
inline void ReadPageReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dbx1000.ReadPageReply.page_buf)
}
inline void ReadPageReply::set_page_buf(const void* value,
    size_t size) {
  
  page_buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dbx1000.ReadPageReply.page_buf)
}
inline std::string* ReadPageReply::_internal_mutable_page_buf() {
  
  return page_buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadPageReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.ReadPageReply.page_buf)
  return page_buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadPageReply::set_allocated_page_buf(std::string* page_buf) {
  if (page_buf != nullptr) {
    
  } else {
    
  }
  page_buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dbx1000.ReadPageReply.page_buf)
}

// uint64 size = 2;
inline void ReadPageReply::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadPageReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadPageReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageReply.size)
  return _internal_size();
}
inline void ReadPageReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void ReadPageReply::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageReply.size)
}

// -------------------------------------------------------------------

// CloseAllRequest

// -------------------------------------------------------------------

// CloseAllReply

// int32 rc = 1;
inline void CloseAllReply::clear_rc() {
  rc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseAllReply::_internal_rc() const {
  return rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseAllReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseAllReply.rc)
  return _internal_rc();
}
inline void CloseAllReply::_internal_set_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rc_ = value;
}
inline void CloseAllReply::set_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:dbx1000.CloseAllReply.rc)
}

// -------------------------------------------------------------------

// CloseRequest

// int32 fd = 1;
inline void CloseRequest::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseRequest::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseRequest.fd)
  return _internal_fd();
}
inline void CloseRequest::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void CloseRequest::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:dbx1000.CloseRequest.fd)
}

// -------------------------------------------------------------------

// CloseReply

// int32 rc = 1;
inline void CloseReply::clear_rc() {
  rc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseReply::_internal_rc() const {
  return rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseReply.rc)
  return _internal_rc();
}
inline void CloseReply::_internal_set_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rc_ = value;
}
inline void CloseReply::set_rc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:dbx1000.CloseReply.rc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbx1000

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto
